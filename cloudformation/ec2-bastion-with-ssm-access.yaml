---
AWSTemplateFormatVersion: '2010-09-09'

Description: EC2 Launch Template optimized for SSH access via SSM with some tools included for administration of hosted services.

Parameters:
  BastionNodeAmiIdSsmParam:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: AWS SSM parameter of the AMI ID for the Bastion Host. Refer to https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  ImageIdOverrideParam:
    Type: 'String'
    Description: 'If this value is supplied, it will override BastionNodeAmiIdSsmParam'
    Default: 'not-set'
  AwsCliZipUrlParam:
    Type: 'String'
    Default: 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'

Conditions:
  UseSSmImageId: !Equals [!Ref ImageIdOverrideParam, 'not-set']

Resources:

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: The Instance Host Security Group
      GroupName: !Sub '${AWS::StackName}-EfsSecurityGroup'
      VpcId: !ImportValue Vpc

  EFSIngressNFS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Allow NFS Inbound
      FromPort: 2049
      ToPort: 2049
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      CidrIp: !ImportValue PublicSubnet1Cidr

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      FileSystemTags:
      - Key: Name
        Value: 'bastion-nfs'

  EFSMountTargetAZa:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId: !ImportValue  PublicSubnet1Id
      SecurityGroups:
      - Ref: EFSSecurityGroup

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: The Instance Host Security Group
      GroupName: !Sub '${AWS::StackName}-BastionSecurityGroup'
      VpcId: !ImportValue Vpc

  HighPortsIngressPrivateVpc1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Allow all insecure ports tcp from VPC CIDR
      FromPort: 1024
      ToPort: 65535
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      CidrIp: !ImportValue VpcCidr

  HighPortsIngressPrivateVpc2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Allow all insecure ports tcp from secondary CIDR
      FromPort: 1024
      ToPort: 65535
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      CidrIp: 100.64.0.0/16

  AllEgressAnyNet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: Allow all outgoing traffic
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  BastionInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
        - !ImportValue Ec2AccessViaSsmPolicyArn
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-BastionInstanceRole'

  RootInstanceProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: '/'
      Roles: 
      - Ref: 'BastionInstanceRole'

  BastionLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LaunchTemplate'
      LaunchTemplateData:
        # BlockDeviceMappings:
        #   - Ebs:
        #       VolumeSize: 8
        #       VolumeType: 'gp2'
        #       DeleteOnTermination: True
        #       Encrypted: True
        #     DeviceName: '/dev/sda1'
        ImageId: !If [UseSSmImageId, !Ref BastionNodeAmiIdSsmParam, !Ref ImageIdOverrideParam]
        InstanceType: 't3.2xlarge'
        IamInstanceProfile: 
            Arn: !GetAtt RootInstanceProfile.Arn
        SecurityGroupIds:
        - !Ref BastionSecurityGroup
        - !ImportValue Ec2AccessViaSsmSecurityGroup

        MetadataOptions:
          HttpEndpoint: 'enabled'
          HttpTokens: 'required'
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                Content-Type: multipart/mixed; boundary="==BOUNDARY=="
                MIME-Version:  1.0
                --==BOUNDARY==
                Content-Type: text/x-shellscript; charset="us-ascii"
                
                #!/bin/bash
                              
                # Update SSM Agent
                yum install -y yum install -y https://s3.${awsregion}.amazonaws.com/amazon-ssm-${awsregion}/latest/linux_amd64/amazon-ssm-agent.rpm
                systemctl restart amazon-ssm-agent

                yum install -y telnet bind-utils nmap-ncat nmap mc python3 python3-pip python3-setuptools postgresql docker jq

                # Upgrade the aws cli
                yum remove -y awscli

                curl "${awscli2url}" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install

                mkdir -p /mnt/efs/
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${efsid}.efs.${awsregion}.amazonaws.com:/ /mnt/efs

                echo "RUNNING CFN-SIGNAL"
                /opt/aws/bin/cfn-signal --exit-code $? --region ${awsregion} --stack ${stackname} --resource BastionLaunchTemplate
                echo "CFN-SIGNAL DONE"
                echo
                echo
                
                --==BOUNDARY==--
              - awscli2url: !Ref AwsCliZipUrlParam
                awsregion: !Ref AWS::Region
                stackname: !Ref AWS::StackName
                efsid: !Ref EFSFileSystem

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: IdleStopperManaged
                Value: 'True'
              - Key: MaxUptime
                Value: '7200'

Outputs:
  BastionLaunchTemplate:
    Value: !Ref BastionLaunchTemplate
    Export:
      Name: BastionLaunchTemplate
  BastionLaunchTemplateLatestVersion:
    Value: !GetAtt BastionLaunchTemplate.LatestVersionNumber
    Export:
      Name: BastionLaunchTemplateLatestVersion
  BastionInstanceRoleArn:
    Value: !GetAtt BastionInstanceRole.Arn
    Export:
      Name: BastionInstanceRoleArn