---
AWSTemplateFormatVersion: '2010-09-09'

Description: Security groups required for the Private EKS Cluster

Resources:
  ControlPlaneNetPrefixList:
    Type: 'AWS::EC2::PrefixList'
    Properties:
      PrefixListName: 'CONTROL_PLANE_NET'
      AddressFamily: 'IPv4'
      MaxEntries: 1
      Entries:
        - Cidr: !ImportValue VpcCidr
          Description: 'CONTROL_PLANE_NET CIDR'
      Tags:
        - Key: 'Name'
          Value: 'CONTROL_PLANE_NET'

  WorkerNetPrefixList:
    Type: 'AWS::EC2::PrefixList'
    Properties:
      PrefixListName: 'NODE_NET'
      AddressFamily: 'IPv4'
      MaxEntries: 1
      Entries:
        - Cidr: !ImportValue PrivateVpcCidr
          Description: 'NODE_NET CIDR'
      Tags:
        - Key: 'Name'
          Value: 'NODE_NET'

  LocalNetPrefixList:
    Type: 'AWS::EC2::PrefixList'
    Properties:
      PrefixListName: 'LOCAL_NET'
      AddressFamily: 'IPv4'
      MaxEntries: 2
      Entries:
        - Cidr: !ImportValue VpcCidr
          Description: 'CONTROL_PLANE_NET CIDR'
        - Cidr: !ImportValue PrivateVpcCidr
          Description: 'NODE_NET CIDR'
      Tags:
        - Key: 'Name'
          Value: 'LOCAL_NET'

  CorpNetPrefixList:
    Type: 'AWS::EC2::PrefixList'
    Properties:
      PrefixListName: 'TRUSTED_NET'
      AddressFamily: 'IPv4'
      MaxEntries: 1
      Entries:
        - Cidr: !ImportValue TrustedNetworkCidr
          Description: 'TRUSTED_NET CIDR'
      Tags:
        - Key: 'Name'
          Value: 'TRUSTED_NET'

  AnyNetPrefixList:
    Type: 'AWS::EC2::PrefixList'
    Properties:
      PrefixListName: 'ANY_NET'
      AddressFamily: 'IPv4'
      MaxEntries: 2
      Entries:
        - Cidr: !ImportValue TrustedNetworkCidr
          Description: 'TRUSTED_NET CIDR'
        - Cidr: !ImportValue PrivateVpcCidr
          Description: 'NODE_NET CIDR'
      Tags:
        - Key: 'Name'
          Value: 'ANY_NET'

  S3PrefixList:
    Type: 'AWS::EC2::PrefixList'
    Properties:
      PrefixListName: 'S3_NET'
      AddressFamily: 'IPv4'
      MaxEntries: 1
      Entries:
        - Cidr: '0.0.0.0/0'
          Description: 'S3 Destinations on Internet IP Addresses which will be relayed via the S3 Gateway EndPoint'

  DnsAndHttpsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Cluster Security Group
      GroupName: 'DnsAndHttpsSecurityGroup'
      VpcId:
        Fn::ImportValue: Vpc

  ControlPlane10250PortGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 10250/tcp within the cluster
      FromPort: 10250
      ToPort: 10250
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  HttpsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 443/tcp (HTTPS) within the cluster
      FromPort: 443
      ToPort: 443
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  Https2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 9443/tcp (HTTPS) within the cluster
      FromPort: 9443
      ToPort: 9443
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  SshTcpSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 22/tcp (SSH) within the cluster
      FromPort: 22
      ToPort: 22
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  DnsTcpSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 53/tcp (DNS) within the cluster
      FromPort: 53
      ToPort: 53
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  DnsUdpSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 53/udp (DNS) within the cluster
      FromPort: 53
      ToPort: 53
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: udp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  LocalAllowAllSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all traffic for EKS Nodes and Control Plane Communications
      IpProtocol: -1
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      SourcePrefixListId:
        Ref: LocalNetPrefixList

  DnsAndHttpsSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      DestinationPrefixListId:
        Ref: AnyNetPrefixList

  S3DnsAndHttpsSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow port 443/tcp (HTTPS) to S3, which could be on a number of IP addresses as it is relayed via the S3 VPC Endpoint Gateway
      FromPort: 443
      ToPort: 443
      GroupId:
        Ref: DnsAndHttpsSecurityGroup
      IpProtocol: tcp
      DestinationPrefixListId:
        Ref: S3PrefixList

  EksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Cluster Security Group
      GroupName: 'EksSecurityGroup'
      VpcId:
        Fn::ImportValue: Vpc

  NodePortTcpEksSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow NodePort TCP ports (see https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
      FromPort: 30000
      ToPort: 32767
      GroupId:
        Ref: EksSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  HttpsEksSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 443/tcp (HTTPS) within the cluster
      FromPort: 443
      ToPort: 443
      GroupId:
        Ref: EksSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  HttpEksSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 80/tcp (HTTPS) within the cluster
      FromPort: 80
      ToPort: 80
      GroupId:
        Ref: EksSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  SshEksSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow port 22/tcp (DNS) within the cluster
      FromPort: 22
      ToPort: 22
      GroupId:
        Ref: EksSecurityGroup
      IpProtocol: tcp
      SourcePrefixListId:
        Ref: AnyNetPrefixList

  EksSecurityGroupTcpAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      GroupId:
        Ref: EksSecurityGroup
      DestinationPrefixListId:
        Ref: AnyNetPrefixList

Outputs:
  ControlPlaneNetPrefixList:
    Value: !Ref ControlPlaneNetPrefixList
    Export:
      Name: ControlPlaneNetPrefixList
  WorkerNetPrefixList:
    Value: !Ref WorkerNetPrefixList
    Export:
      Name: WorkerNetPrefixList
  LocalNetPrefixList:
    Value: !Ref LocalNetPrefixList
    Export:
      Name: LocalNetPrefixList
  CorpNetPrefixList:
    Value: !Ref CorpNetPrefixList
    Export:
      Name: CorpNetPrefixList
  AnyNetPrefixList:
    Value: !Ref AnyNetPrefixList
    Export:
      Name: AnyNetPrefixList
  DnsAndHttpsSecurityGroupId:
    Description: 'GroupId of DnsAndHttpsSecurityGroup'
    Value:
      Fn::GetAtt:
        - 'DnsAndHttpsSecurityGroup'
        - 'GroupId'
    Export:
      Name: 'DnsAndHttpsSecurityGroupId'
  EksSecurityGroupId:
    Description: 'GroupId of EksSecurityGroup'
    Value:
      Fn::GetAtt:
        - 'EksSecurityGroup'
        - 'GroupId'
    Export:
      Name: 'EksSecurityGroupId'
