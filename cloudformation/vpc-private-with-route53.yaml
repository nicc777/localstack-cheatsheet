---
AWSTemplateFormatVersion: '2010-09-09'

Description: Basic Private VPC and Route 53 resources

Parameters:
  VpcCidrAddressParam:
    Type: 'String'
    Default: '10.10.0.10/24'
    Description: 'VPC CIDR address part'
  MainSubnetAz1Cidr:
    Type: 'String'
    Default: '10.10.0.0/26'
  MainSubnetAz2Cidr:
    Type: 'String'
    Default: '10.10.0.64/26'
  MainSubnetAz3Cidr:
    Type: 'String'
    Default: '10.10.0.128/26'
  DnsDomainParam:
    Type: 'String'
    Default: '.example.tld'
    Description: 'Full qualified DNS domain'
    MinLength: 1
  TrustedNetworkCidrParam:
    Type: 'String'
    Default: '192.168.0.0/24'
    Description: 'CIDR for Trusted Network'
    MinLength: 1
  VpcFlowLogBucketParam:
    Type: 'String'
    Description: 'Name of logging bucket for the VPC Flow logs of this VPC'

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrAddressParam
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: 'Name'
          Value: 'private_vpc'

  VpcFlowLogs:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      LogDestination: !Sub 'arn:aws:s3:::${VpcFlowLogBucketParam}'
      LogDestinationType: 's3'
      ResourceId: !Ref Vpc
      ResourceType: 'VPC'
      TrafficType: 'ALL'

  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: 'network_acl'

  NetworkAclAllowTrustedIngress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      Egress: False
      RuleAction: 'allow'
      RuleNumber: 100
      Protocol: '-1'
      CidrBlock: !Ref TrustedNetworkCidrParam

  NetworkAclAllowTrustedEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      Egress: True
      RuleAction: 'allow'
      RuleNumber: 100
      Protocol: '-1'
      CidrBlock: !Ref TrustedNetworkCidrParam

  NetworkAclAwsFirewallIngress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      Egress: False
      RuleAction: 'allow'
      RuleNumber: 900
      Protocol: '6'
      PortRange:
        From: 1024
        To: 65535
      CidrBlock: '0.0.0.0/0'

  NetworkAclAwsFirewallEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      Egress: True
      RuleAction: 'allow'
      RuleNumber: 900
      Protocol: '6'
      PortRange:
        From: 443
        To: 443
      CidrBlock: '0.0.0.0/0'

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: 'route_table'

  SubnetMainAz1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref MainSubnetAz1Cidr
      MapPublicIpOnLaunch: False
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: 'subnet_main_az1'

  NetworkAclSubnetMainAz1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetMainAz1

  RouteTableSubnetMainAz1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetMainAz1

  SubnetMainAz2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref MainSubnetAz2Cidr
      MapPublicIpOnLaunch: False
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: 'subnet_main_az2'

  NetworkAclSubnetMainAz2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetMainAz2

  RouteTableSubnetMainAz2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetMainAz2

  SubnetMainAz3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref MainSubnetAz3Cidr
      MapPublicIpOnLaunch: False
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: 'subnet_main_az3'

  NetworkAclSubnetMainAz3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetMainAz3
      
  RouteTableSubnetMainAz3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetMainAz3

  MainHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DnsDomainParam}'
      Name: !Ref DnsDomainParam
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: 'Name'
          Value: !Ref DnsDomainParam

  DhcpOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: !Ref DnsDomainParam
      DomainNameServers:
        - 'AmazonProvidedDNS'
      Tags:
        - Key: 'Name'
          Value: !Ref DnsDomainParam

  DhcpOptionsVpc:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref Vpc

  # Add dummy rule to prevent auto creation of default rule.
  SgDefaultDenyAllEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt Vpc.DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: '127.0.0.1/32'
      Description: 'Dummy rule to prevent creation of default rule'

Outputs:
  Vpc:
    Value: !Ref Vpc
    Export:
      Name: Vpc
  VpcCidr:
    Value: !GetAtt Vpc.CidrBlock
    Export:
      Name: VpcCidr
  TrustedNetworkCidr:
    Value: !Ref TrustedNetworkCidrParam
    Export:
      Name: TrustedNetworkCidr
  DnsDomain:
    Value: !Ref DnsDomainParam
    Export:
      Name: DnsDomain
  RouteTable:
    Value: !Ref RouteTable
    Export:
      Name: RouteTable
  NetworkAcl:
    Value: !Ref NetworkAcl
    Export:
      Name: NetworkAcl
  MainHostedZone:
    Value: !Ref MainHostedZone
    Export:
      Name: MainHostedZone
  SubnetMainAz1:
    Value: !Ref SubnetMainAz1
    Export:
      Name: SubnetMainAz1
  SubnetMainAz1Az:
    Value: !GetAtt SubnetMainAz1.AvailabilityZone
    Export:
      Name: SubnetMainAz1Az
  SubnetMainAz2:
    Value: !Ref SubnetMainAz2
    Export:
      Name: SubnetMainAz2
  SubnetMainAz2Az:
    Value: !GetAtt SubnetMainAz2.AvailabilityZone
    Export:
      Name: SubnetMainAz2Az
  SubnetMainAz3:
    Value: !Ref SubnetMainAz3
    Export:
      Name: SubnetMainAz3
  SubnetMainAz3Az:
    Value: !GetAtt SubnetMainAz3.AvailabilityZone
    Export:
      Name: SubnetMainAz3Az
